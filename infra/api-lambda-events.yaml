AWSTemplateFormatVersion: '2010-09-09'
Description: API Gateway (HTTP API v2) + Lambda para crear eventos con validación de rol

Parameters:
  ProjectName:
    Type: String
    Default: events-app
    Description: Nombre lógico del proyecto
  CodeS3Bucket:
    Type: String
    Description: Bucket S3 donde está el ZIP de la Lambda
  CodeS3Key:
    Type: String
    Description: Key del ZIP de la Lambda en S3 (paquete de la lambda de eventos)
  LambdaRoleArn:
    Type: String
    Description: ARN del rol EXISTENTE para la Lambda (no se crea en este stack)
  ApiName:
    Type: String
    Default: events-app-httpapi
    Description: Nombre del API HTTP
  StageName:
    Type: String
    Default: prod
    Description: Nombre de la Stage del API

Resources:

  UsersLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${ProjectName}-users-lambda-role
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal: { Service: [lambda.amazonaws.com] }
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: DynamoAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:PutItem
                  - dynamodb:UpdateItem
                  - dynamodb:GetItem
                Resource:
                  - !Sub arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${TableName}
                  - !Sub arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${TableName}/index/*


  ###################################
  # Lambda (usa rol existente + código en S3)
  ###################################
  CreateEventLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub '${ProjectName}-create-event-lambda'
      Handler: app.lambda_handler
      Runtime: python3.12
      Role: !GetAtt UsersLambdaRole.Arn
      Code:
        S3Bucket: !Ref CodeS3Bucket
        S3Key: !Ref CodeS3Key
      Environment:
        Variables:
          EVENTS_TABLE: EventManagementTable
          USERS_TABLE: UserManagementTable
      Timeout: 15
      MemorySize: 256
      TracingConfig:
        Mode: PassThrough

  ###################################
  # API Gateway HTTP API v2
  ###################################
  EventsHttpApi:
    Type: AWS::ApiGatewayV2::Api
    Properties:
      Name: !Ref ApiName
      ProtocolType: HTTP
      CorsConfiguration:
        AllowOrigins: ['*']
        AllowMethods: ['POST', 'OPTIONS']
        AllowHeaders: ['*']

  CreateEventLambdaIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref EventsHttpApi
      IntegrationType: AWS_PROXY
      IntegrationUri: !GetAtt CreateEventLambdaFunction.Arn
      PayloadFormatVersion: '2.0'
      TimeoutInMillis: 30000

  CreateEventLambdaRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref EventsHttpApi
      RouteKey: 'POST /events'
      Target: !Sub 'integrations/${CreateEventLambdaIntegration}'

  EventsStage:
    Type: AWS::ApiGatewayV2::Stage
    Properties:
      ApiId: !Ref EventsHttpApi
      StageName: !Ref StageName
      AutoDeploy: true

  ###################################
  # Permiso de invocación
  ###################################
  CreateEventLambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref CreateEventLambdaFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${EventsHttpApi}/*/POST/events'

Outputs:
  EventsApiEndpoint:
    Description: URL del endpoint para crear eventos
    Value: !Sub 'https://${EventsHttpApi}.execute-api.${AWS::Region}.amazonaws.com/${StageName}/events'
