Description: |
  Plantilla para desplegar los siguientes servicios AWS: Lambda
  Esta plantilla despliega varias funciones Lambda, tablas DynamoDB y un API Gateway con operaciones CRUD para la gestion de eventos y usuarios.
  Este template esta diseñado para ambientes de desarrollo y aprendizaje, optimizado para la capa gratuita de AWS.


Metadata:
  Author: "Juan Manuel"
  Version: "1.0"
  LastUpdated: "2025"

Parameters:
  CodeS3Bucket:
    Type: String
  CodeS3Key:
    Type: String
  CodeS3KeyEvent:
    Type: String
  CodeS3KeyRegister:
    Type: String
  CodeS3KeySqsConsumer:         # ← nuevo parámetro para el zip de esta lambda
    Type: String
  ProjectName:
    Type: String


Resources:
  CreateEventLambdaFunctionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: 'Allow'
            Principal:
              Service: 'lambda.amazonaws.com' # Permite que Lambda asuma este rol
            Action: 'sts:AssumeRole'
      Policies:
        - PolicyName: 'EventLambdaExecutionPolicy' # Nombre unico para la politica de EventManagement
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: 'Allow'
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource: !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/EventManagementLambda*"  # Permisos especificos de logs para esta funcion
              - Effect: 'Allow'
                Action:
                  - 'dynamodb:PutItem'
                  - 'dynamodb:UpdateItem'
                  - 'dynamodb:DeleteItem'
                  - 'dynamodb:GetItem'
                  - 'dynamodb:Query'
                  - 'dynamodb:Scan'
                Resource:
                  - !ImportValue "EventTableArn"
                 #!GetAtt EventManagementTable.Arn # Referencia dinamica a la tabla
              - Effect: 'Allow'
                Action:
                  - 'dynamodb:GetItem'
                Resource:
                  - !ImportValue "UserTableArn"               
              - Effect: 'Allow'
                Action:
                  - 'dynamodb:Query'
                  - 'dynamodb:Scan' # Operaciones de consulta en indices secundarios
                Resource: !Sub 
                  - "${TableArn}/index/*"
                  - { TableArn: { "Fn::ImportValue": "EventTableArn" } }
                #"${EventManagementTable.Arn}/*" # Acceso a indices secundarios


  CreateEventLambdaFunctionLogGroup:
    Type: 'AWS::Logs::LogGroup'
    Properties:
      LogGroupName: "/aws/lambda/EventManagementLambda"  # Nombre especifico del grupo de logs
      RetentionInDays: 30  # Retener logs por 30 dias

  CreateEventLambdaFunction: 
    Type: 'AWS::Lambda::Function'
    DependsOn: CreateEventLambdaFunctionLogGroup  # Asegura que el log group existe antes que la Lambda
    Properties:
      FunctionName: 'EventManagementLambda' # Nombre fijo de la funcion
      Handler: 'app.handler'
      Runtime: python3.12  # Version actualizada de Python
      Code:
        S3Bucket: events-app-lambda-code-884234865118-us-west-2  # Bucket con nombre unico por cuenta/region
        S3Key: !Ref CodeS3KeyEvent # Archivo ZIP con el codigo fuente
      MemorySize: 128  # Memoria asignada en MB
      Timeout: 20  # Timeout en segundos
      Role: !GetAtt CreateEventLambdaFunctionRole.Arn  # Referencia al rol IAM creado anteriormente
      Environment: # Variables de entorno para configuracion dinamica
        Variables:
          EVENTS_TABLE: !ImportValue EventTableName   # nombre de la tabla de eventos
          USERS_TABLE:  !ImportValue UserTableName    # nombre de la tabla de usuarios
          REGION: !Ref AWS::Region
          LOG_LEVEL: INFO  # Nivel de logging configurable


  CreateUserLambdaRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: 'Allow'
            Principal:
              Service: 'lambda.amazonaws.com' # Permite que Lambda asuma este rol
            Action: 'sts:AssumeRole'
      Policies:
        - PolicyName: 'UserLambdaExecutionPolicy' # Nombre unico para la politica de UserManagement
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: 'Allow'
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource: !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/UserManagementLambda*"  # Permisos especificos de logs para esta funcion
              - Effect: 'Allow'
                Action:
                  - 'dynamodb:PutItem'
                  - 'dynamodb:UpdateItem'
                  - 'dynamodb:DeleteItem'
                  - 'dynamodb:GetItem'
                  - 'dynamodb:Query'
                  - 'dynamodb:Scan'
                Resource: !ImportValue UserTableArn  # Referencia dinamica a la tabla
              - Effect: 'Allow'
                Action:
                  - 'dynamodb:Query'
                  - 'dynamodb:Scan' # Agregado para consistencia con otros roles
                Resource: !Sub
                  - "${TableArn}/index/*"
                  - { TableArn: { "Fn::ImportValue": "UserTableArn" } }  # Acceso a indices secundarios

  CreateUserLambdaLogGroup:
    Type: 'AWS::Logs::LogGroup'
    Properties:
      LogGroupName: "/aws/lambda/UserManagementLambda"  # Nombre especifico del grupo de logs
      RetentionInDays: 30  # Retener logs por 30 dias


  # Lambda para User Management
  CreateUserLambdaFunction: 
    Type: 'AWS::Lambda::Function'
    DependsOn: CreateUserLambdaLogGroup  # Asegura que el log group existe antes que la Lambda
    Properties:
      FunctionName: 'UserManagementLambda' # Nombre fijo de la funcion
      Handler: 'app.handler'
      Runtime: python3.12  # Version actualizada de Python
      Code:
        S3Bucket: events-app-lambda-code-884234865118-us-west-2  # Bucket con nombre unico por cuenta/region
        S3Key: !Ref CodeS3Key # Archivo ZIP con el codigo fuente
      MemorySize: 128  # Memoria asignada en MB
      Timeout: 20  # Timeout en segundos
      Role: !GetAtt CreateUserLambdaRole.Arn  # Referencia al rol IAM
      Environment: # Variables de entorno para configuracion dinamica
        Variables:
          TABLE_NAME: !ImportValue UserTableName
          REGION: !Ref AWS::Region
          LOG_LEVEL: INFO  # Nivel de logging configurable



  CreateRegistrationLambdaRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: 'Allow'
            Principal:
              Service: 'lambda.amazonaws.com' # Permite que Lambda asuma este rol
            Action: 'sts:AssumeRole'
      Policies:
        - PolicyName: 'RegistrationLambdaExecutionPolicy' # Nombre unico para la politica de UserManagement
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: 'Allow'
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource: !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/RegistrationManagementLambda*"  # Permisos especificos de logs para esta funcion
              - Effect: 'Allow'
                Action:
                  - 'dynamodb:PutItem'
                  - 'dynamodb:UpdateItem'
                  - 'dynamodb:DeleteItem'
                  - 'dynamodb:GetItem'
                  - 'dynamodb:Query'
                  - 'dynamodb:Scan'
                Resource:
                  - !ImportValue "RegistrationTableArn"
                 #!GetAtt EventManagementTable.Arn # Referencia dinamica a la tabla
              - Effect: 'Allow'
                Action:
                  - 'dynamodb:PutItem'
                Resource:
                  - !ImportValue "EventTableArn"               
              - Effect: 'Allow'
                Action:
                  - 'dynamodb:Query'
                  - 'dynamodb:Scan' # Operaciones de consulta en indices secundarios
                Resource: !Sub
                  - "${TableArn}/index/*"
                  - { TableArn: { "Fn::ImportValue": "RegistrationTableArn" } }  # Acceso a indices secundarios
              - Effect: Allow
                Action:
                  - dynamodb:UpdateItem
                Resource:
                  - !ImportValue EventTableArn
              
              - Effect: Allow
                Action:
                  - dynamodb:TransactWriteItems
                Resource: "*" 
              
              - Effect: Allow
                Action:
                  - dynamodb:GetItem
                Resource:
                  - !ImportValue EventTableArn   # ← tabla de eventos
                  - !ImportValue UserTableArn    # ← tabla de usuarios
              - Effect: Allow
                Action:
                  - dynamodb:ConditionCheckItem   # validar usuario existe
                Resource:
                  - !ImportValue UserTableArn
              - Effect: Allow
                Action:
                  - sqs:SendMessage
                Resource:
                  - !ImportValue RegistrationQueueArn

  CreateRegistrationLambdaLogGroup:
    Type: 'AWS::Logs::LogGroup'
    Properties:
      LogGroupName: "/aws/lambda/RegistrationManagementLambda"  # Nombre especifico del grupo de logs
      RetentionInDays: 30  # Retener logs por 30 dias
 

                  
  CreateRegistrationLambdaFunction: 
    Type: 'AWS::Lambda::Function'
    DependsOn: CreateRegistrationLambdaLogGroup  # Asegura que el log group existe antes que la Lambda
    Properties:
      FunctionName: 'RegistrationManagementLambda' # Nombre fijo de la funcion
      Handler: 'app.handler'
      Runtime: python3.12  # Version actualizada de Python
      Code:
        S3Bucket: events-app-lambda-code-884234865118-us-west-2  # Bucket con nombre unico por cuenta/region
        S3Key: !Ref CodeS3KeyRegister # Archivo ZIP con el codigo fuente
      MemorySize: 128  # Memoria asignada en MB
      Timeout: 20  # Timeout en segundos
      Role: !GetAtt CreateRegistrationLambdaRole.Arn  # Referencia al rol IAM
      Environment: # Variables de entorno para configuracion dinamica
        Variables:
          EVENTS_TABLE: !ImportValue EventTableName   # nombre de la tabla de eventos
          USERS_TABLE:  !ImportValue UserTableName    # nombre de la tabla de usuarios
          REGISTRATION_TABLE: !ImportValue RegistrationTableName
          REGION: !Ref AWS::Region
          LOG_LEVEL: INFO  # Nivel de logging configurable
          SQS_QUEUE_URL: !ImportValue RegistrationQueueUrl  # ← cámbiala
    
    

RegistrationSqsConsumerLambdaRole:
  Type: AWS::IAM::Role
  Properties:
    AssumeRolePolicyDocument:
      Version: "2012-10-17"
      Statement:
        - Effect: Allow
          Principal:
            Service: lambda.amazonaws.com
          Action: sts:AssumeRole
    Policies:
      - PolicyName: RegistrationSqsConsumerLogs
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
            # Permisos para escribir logs (mismo patrón que tus otras lambdas)
            - Effect: Allow
              Action:
                - logs:CreateLogGroup
                - logs:CreateLogStream
                - logs:PutLogEvents
              Resource: !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/RegistrationSqsConsumerLambda*

RegistrationSqsConsumerLogGroup:
  Type: AWS::Logs::LogGroup
  Properties:
    LogGroupName: /aws/lambda/RegistrationSqsConsumerLambda
    RetentionInDays: 14


    Type: 'AWS::Lambda::Function'
    DependsOn: CreateRegistrationLambdaLogGroup  # Asegura que el log group existe antes que la Lambda
    Properties:
      FunctionName: 'RegistrationManagementLambda' # Nombre fijo de la funcion
      Handler: 'app.handler'
      Runtime: python3.12  # Version actualizada de Python

RegistrationSqsConsumerLambda:
  Type: AWS::Lambda::Function
  DependsOn: RegistrationSqsConsumerLogGroup 
  Properties:
    FunctionName: RegistrationSqsConsumerLambda
    Handler: app.handler
    Runtime: python3.12              # mismo handler style que usas
    Role: !GetAtt RegistrationSqsConsumerLambdaRole.Arn
    MemorySize: 256
    Timeout: 30
    Environment:
      Variables:
        REGION: !Ref AWS::Region
        LOG_LEVEL: INFO
        SQS_QUEUE_URL: !ImportValue RegistrationQueueUrl   # ya existente en tu stack de SQS
    Code:
      S3Bucket: !Ref CodeS3Bucket
      S3Key: !Ref CodeS3KeySqsConsumer

RegistrationSqsConsumerEventSourceMapping:
  Type: AWS::Lambda::EventSourceMapping
  Properties:
    EventSourceArn: !ImportValue RegistrationQueueArn   # ARN de la cola SQS
    FunctionName: !Ref RegistrationSqsConsumerLambda
    BatchSize: 10
    MaximumBatchingWindowInSeconds: 1
    Enabled: true
    FunctionResponseTypes:


Outputs:
  EventFunctionArn:
    Description: ARN de la Lambda de eventos
    Value: !GetAtt CreateEventLambdaFunction.Arn
    Export:
      Name: !Sub "${ProjectName}-EventFunctionArn"

  UserFunctionArn:
    Description: ARN de la Lambda de usuarios
    Value: !GetAtt CreateUserLambdaFunction.Arn
    Export:
      Name: !Sub "${ProjectName}-UserFunctionArn"

  RegistrationFunctionArn:
    Description: ARN de la Lambda de registro de ventas
    Value: !GetAtt CreateRegistrationLambdaFunction.Arn
    Export:
      Name: !Sub "${ProjectName}-RegistrationFunctionArn"

      