name: Deploy (main)

on:
  push:
    branches: [ main ]
    paths:
      - 'infra/**'
      - 'lambda/**'
      - '.github/workflows/deploy.yml'
  workflow_dispatch:

permissions:
  id-token: write
  contents: read

env:
  AWS_REGION: us-west-2
  PROJECT_NAME: events-app

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          aws-region: ${{ env.AWS_REGION }}

      # 1) Empaquetar Lambda (app.py DEBE estar en la RAÍZ del zip)
      - name: Zip Lambda
        run: |
          mkdir -p dist
          cd lambda/users_create
          zip -r ../../dist/users_create.zip app.py

      - name: Zip Lambda event
        run: |
          mkdir -p dist
          cd lambda/add_event
          zip -r ../../dist/add_event.zip app.py

      # 2) Bucket para código: CFN idempotente + leer Output con el nombre real
      - name: Ensure code bucket (CFN) + resolve name
        run: |
          aws cloudformation deploy \
            --template-file infra/s3-code-bucket.yaml \
            --stack-name ${PROJECT_NAME}-lambda-code-bucket \
            --parameter-overrides ProjectName=${PROJECT_NAME} \
            --region ${AWS_REGION}
          CODE_BUCKET=$(aws cloudformation describe-stacks \
            --stack-name "${PROJECT_NAME}-lambda-code-bucket" \
            --region ${AWS_REGION} \
            --query "Stacks[0].Outputs[?OutputKey=='BucketName'].OutputValue" \
            --output text)
          echo "CODE_BUCKET=$CODE_BUCKET" >> $GITHUB_ENV
          aws s3api head-bucket --bucket "$CODE_BUCKET" --region ${AWS_REGION}

      # 3) Subir ZIP versionado por commit
      - name: Upload ZIP to S3
        run: |
          CODE_S3_KEY=lambda/users_create-${GITHUB_SHA}.zip
          echo "CODE_S3_KEY=$CODE_S3_KEY" >> $GITHUB_ENV
          aws s3 cp dist/users_create.zip "s3://$CODE_BUCKET/$CODE_S3_KEY" --region ${AWS_REGION}

      - name: Upload ZIP to S3 event
        run: |
          CODE_S3_KEY_EVENT=lambda/add_event-${GITHUB_SHA}.zip
          echo "CODE_S3_KEY_EVENT=$CODE_S3_KEY_EVENT" >> $GITHUB_ENV
          aws s3 cp dist/add_event.zip "s3://$CODE_BUCKET/$CODE_S3_KEY_EVENT" --region ${AWS_REGION}

      # 4) Desplegar API + Lambda (usa TableName del template o pásalo si quieres forzarlo)

      - name: Deploy API + Lambda
        run: |
          aws cloudformation deploy \
            --template-file infra/api-lambda-users.yaml \
            --stack-name ${PROJECT_NAME}-users-api \
            --capabilities CAPABILITY_NAMED_IAM \
            --parameter-overrides \
              ProjectName=${PROJECT_NAME} \
              CodeS3Bucket=${CODE_BUCKET} \
              CodeS3Key=${CODE_S3_KEY} \
            --region ${AWS_REGION}



      - name: Deploy Events API + Lambda
        run: |
          aws cloudformation deploy \
            --template-file infra/api-lambda-events.yaml \
            --stack-name events-api-stack \
            --capabilities CAPABILITY_NAMED_IAM \
            --parameter-overrides \
              ProjectName=${PROJECT_NAME} \
              CodeS3Bucket=${CODE_BUCKET} \
              CodeS3Key=${CODE_S3_KEY_EVENT} \
              LambdaRoleArn=${LAMBDA_ROLE_ARN} \
              ApiName=events-app-httpapi \
              StageName=prod \
            --region ${AWS_REGION} \
            --no-fail-on-empty-changeset

      - name: Deploy DynamoDB tables
        run: |
          aws cloudformation deploy \
            --stack-name "${PROJECT_NAME}-dynamodb" \
            --template-file infra/dynamodb.yaml \
            --parameter-overrides ProjectName="${PROJECT_NAME}" \
            --region "${AWS_REGION}"
          
      - name: Deploy DynamoDB tables    
          aws cloudformation deploy \
            --template-file infra/restapi.yaml \
            --stack-name ${PROJECT_NAME}-restapi \
            --parameter-overrides ProjectName=${PROJECT_NAME} \
            --region ${AWS_REGION}
          
          # 2) Obtener IDs del API (Outputs del stack)
      - name: Obtener IDs del API
          REST_API_ID=$(aws cloudformation describe-stacks \
            --stack-name ${PROJECT_NAME}-restapi \
            --query "Stacks[0].Outputs[?OutputKey=='RestApiId'].OutputValue" \
            --output text --region ${AWS_REGION})
          
          ROOT_ID=$(aws cloudformation describe-stacks \
            --stack-name ${PROJECT_NAME}-restapi \
            --query "Stacks[0].Outputs[?OutputKey=='RootResourceId'].OutputValue" \
            --output text --region ${AWS_REGION})
          
          # 3) Desplegar USERS (pasa RestApiId y RootResourceId)
      - name: Desplegar USERS
          aws cloudformation deploy \
            --template-file infra/api-lambda-users.yaml \
            --stack-name ${PROJECT_NAME}-users-api \
            --capabilities CAPABILITY_NAMED_IAM \
            --parameter-overrides \
              ProjectName=${PROJECT_NAME} \
              CodeS3Bucket=${CODE_BUCKET} \
              CodeS3Key=${CODE_S3_KEY} \
              LambdaRoleArn=${LAMBDA_ROLE_ARN} \
              RestApiId=${REST_API_ID} \
              RootResourceId=${ROOT_ID} \
            --region ${AWS_REGION}
          
          # 4) Desplegar EVENTS (pasa RestApiId y RootResourceId)
      - name: Desplegar EVENTS
          aws cloudformation deploy \
            --template-file infra/api-lambda-events.yaml \
            --stack-name ${PROJECT_NAME}-events-api \
            --capabilities CAPABILITY_NAMED_IAM \
            --parameter-overrides \
              ProjectName=${PROJECT_NAME} \
              CodeS3Bucket=${CODE_BUCKET} \
              CodeS3Key=${CODE_S3_KEY_EVENT} \
              LambdaRoleArn=${LAMBDA_ROLE_ARN} \
              RestApiId=${REST_API_ID} \
              RootResourceId=${ROOT_ID} \
            --region ${AWS_REGION}
          
          # 5) Publicar la stage 'prod' (crea o actualiza el deployment)
      - name: Publicar la stage 'prod'
          aws apigateway create-deployment \
            --rest-api-id ${REST_API_ID} \
            --stage-name prod \
            --region ${AWS_REGION}
      - name: Summary
        run: echo "✅ Deploy OK" >> $GITHUB_STEP_SUMMARY
